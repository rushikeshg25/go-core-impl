package main

import (
	"fmt"
	"sync"
	"time"
)

func worker(workerId int, jobs <-chan int, results chan<- int) {
	for job := range jobs {
		time.Sleep(time.Second * 2)
		res := job * 2
		results <- res
		fmt.Printf("Worker %d did job %d\n", workerId, job)
	}

}

func main() {
	workerNum := 3
	jobNum := 10
	jobs := make(chan int, jobNum)
	results := make(chan int, jobNum)
	resArray := make([]int, 0)
	var wg sync.WaitGroup
	wg.Add(1)

	go func() {
		defer wg.Done()
		for i := 0; i < jobNum; i++ {
			res := <-results
			resArray = append(resArray, res)
		}
	}()

	for i := 0; i < workerNum; i++ {
		go worker(i, jobs, results)
	}

	for i := 0; i < jobNum; i++ {
		jobs <- i
	}
	close(jobs)
	wg.Wait()
	fmt.Println("done")
	fmt.Println(resArray)
}
